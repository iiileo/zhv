name: 构建和发布

on:
  push:
    tags:
      - 'v*'  # 当推送以 v 开头的标签时触发，例如 v1.0.0
  workflow_dispatch:  # 允许手动触发

env:
  GO_VERSION: '1.24.2'

jobs:
  build:
    name: 构建多平台二进制文件
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义要构建的目标平台
        include:
          - goos: linux
            goarch: amd64
            suffix: ''
          - goos: linux
            goarch: arm64
            suffix: ''
          - goos: windows
            goarch: amd64
            suffix: '.exe'
          - goos: darwin
            goarch: amd64
            suffix: ''
          - goos: darwin
            goarch: arm64
            suffix: ''
          - goos: freebsd
            goarch: amd64
            suffix: ''
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取所有历史记录，用于生成变更日志

    - name: 设置 Go 环境
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 缓存 Go 模块
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 下载依赖
      run: go mod download

    - name: 获取版本信息
      id: version
      run: |
        if [ "${{ github.ref_type }}" == "tag" ]; then
          VERSION=${{ github.ref_name }}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

    - name: 构建二进制文件
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # 设置构建标志，嵌入版本信息
        LDFLAGS="-s -w"
        LDFLAGS="$LDFLAGS -X 'main.Version=${{ steps.version.outputs.version }}'"
        LDFLAGS="$LDFLAGS -X 'main.BuildTime=${{ steps.version.outputs.build_time }}'"
        LDFLAGS="$LDFLAGS -X 'main.GitCommit=${{ steps.version.outputs.short_sha }}'"
        
        # 构建
        OUTPUT_NAME="zhv-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}"
        go build -ldflags="$LDFLAGS" -o "$OUTPUT_NAME" ./
        
        # 如果是 Unix 系统，设置执行权限
        if [ "${{ matrix.goos }}" != "windows" ]; then
          chmod +x "$OUTPUT_NAME"
        fi
        
        # 创建压缩包
        if [ "${{ matrix.goos }}" == "windows" ]; then
          zip "$OUTPUT_NAME.zip" "$OUTPUT_NAME" README.md
        else
          tar -czf "$OUTPUT_NAME.tar.gz" "$OUTPUT_NAME" README.md
        fi

    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: zhv-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          zhv-${{ matrix.goos }}-${{ matrix.goarch }}*
        retention-days: 30

  release:
    name: 创建 Release
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    permissions:
      contents: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 下载所有构建产物
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: 整理文件
      run: |
        mkdir -p ./release
        find ./artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} ./release/ \;
        ls -la ./release/

    - name: 生成变更日志
      id: changelog
      run: |
        # 获取当前标签和上一个标签
        CURRENT_TAG=${{ github.ref_name }}
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")
        
        echo "current_tag=${CURRENT_TAG}" >> $GITHUB_OUTPUT
        
        # 生成变更日志
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## 🚀 更新内容" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**完整变更**: [$PREVIOUS_TAG...$CURRENT_TAG](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)" >> CHANGELOG.md
        else
          echo "## 🎉 首次发布" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "这是 ZHV (中文变量名推荐工具) 的首次发布！" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## 📦 下载说明" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "请根据您的操作系统选择对应的文件下载：" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "| 操作系统 | 架构 | 文件名 |" >> CHANGELOG.md
        echo "|---------|------|--------|" >> CHANGELOG.md
        echo "| Linux | x86_64 | \`zhv-linux-amd64.tar.gz\` |" >> CHANGELOG.md
        echo "| Linux | ARM64 | \`zhv-linux-arm64.tar.gz\` |" >> CHANGELOG.md
        echo "| macOS | x86_64 | \`zhv-darwin-amd64.tar.gz\` |" >> CHANGELOG.md
        echo "| macOS | ARM64 (M1/M2) | \`zhv-darwin-arm64.tar.gz\` |" >> CHANGELOG.md
        echo "| Windows | x86_64 | \`zhv-windows-amd64.zip\` |" >> CHANGELOG.md
        echo "| FreeBSD | x86_64 | \`zhv-freebsd-amd64.tar.gz\` |" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## 🛠 安装方法" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Linux/macOS" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "# 下载对应文件并解压" >> CHANGELOG.md
        echo "tar -xzf zhv-linux-amd64.tar.gz" >> CHANGELOG.md
        echo "# 移动到 PATH 目录" >> CHANGELOG.md
        echo "sudo mv zhv-linux-amd64 /usr/local/bin/zhv" >> CHANGELOG.md
        echo "# 验证安装" >> CHANGELOG.md
        echo "zhv --help" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Windows" >> CHANGELOG.md
        echo "1. 下载 \`zhv-windows-amd64.zip\`" >> CHANGELOG.md
        echo "2. 解压到任意目录" >> CHANGELOG.md
        echo "3. 将解压目录添加到系统 PATH 环境变量" >> CHANGELOG.md
        echo "4. 在命令提示符中运行 \`zhv --help\` 验证安装" >> CHANGELOG.md

    - name: 创建 Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Release ${{ steps.changelog.outputs.current_tag }}"
        body_path: CHANGELOG.md
        files: ./release/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 更新最新版本标签
      run: |
        # 如果不是预发布版本，更新 latest 标签
        if [[ ! "${{ github.ref_name }}" =~ (rc|beta|alpha) ]]; then
          git tag -f latest
          git push -f origin latest
        fi
